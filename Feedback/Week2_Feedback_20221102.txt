Starting code feedback for Aditi, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 3.45 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week2, week3, .git, week1, Feedback

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~
*.tmp
*.pdf
*.log
/.idea
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## My CMEE Coursework Repository

This GitHub repository has coursework and code for the work done during MRes in CMEE. Every week has a different folder and it contains sub-folders containing the code, data and results. 

### Week 1
Week one covers the basics of the Unix environment and shell scripting. The OS used for this course is Ubuntu 22.04 LTS. For the shell scripting, the bash shell is used. The scripts and code are present in the code directory and the data is availabe in the data directory.

### Week 2
Week two covers the basics of Python. Python version 3.10.6 is used for this course. Along with this, Visual Studio Code is the IDE used. The scripts and programs are present in the code directory. The data required for the codes to run is present in the data directory. The results directory is empty currently and will be populated with the outputs of the scripts and programs. The sandbox directory is empty. 

### Week 3
Week 3 covers the basics of R. R vesion 4.1.2 ('Bird Hippie') is used. The IDE used is RStudio.  
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, data, results

Found the following files: .gitignore, README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## Week 2

### This docments outlines the contents of week 2

'week2' contains four directories namely 'code', 'data', 'results, 'sandbox'.

#### Code
This directory contains all python scripts and files containing code that are required for submission. All the scripts have to be called using this directory as the present working directory. The following is a short description of the files present in this directory:

* align_seqs.py: It is a python program which aligns two given sequences. The sequences are hardcoded in the program.
* basic_csv.py: This script gives an example on how to read and write .csv files.
* basic_io1.py: This script gives and example on how to read a .txt file.
* basic_io2.py:  This script gives an example on how to write a .txt file.
* baic_io3.py: This script gives an example on how to read and write binary files.
* boilerplate.py: This file illustrstes the basic syntax for writing a python program. It needs no input.
* cfexercies1.py: This file illustrstes basic of writing a module in python.
* cfexercies2.py: This script has basic functions in it. It cannot be called as a program.
* control_flow.py: This program shows how the control flow happens in python.
* debugme.py: This python script shows the basics of debugging in python.
* dictionary.py: This file converts a list of tuples to a dictionary in various ways.
* lc1.py: This script illustrates basics of list comprehension.
* lc2.py: This script uses conditional list comprehension to separate the data.
* loops.py: This script outlines the usage of loops in python.
* MyExampleScript.py: Contains an example function.
* oaks_debufme.py: This program separates the oaks from a list of tree species.
* oaks.py: This script also separates the oaks from a list of tree species.
* scope.py: This file illustrates variable scope. It will run with an error.
* sysargv.py: This file shows the use and application of system arguements.
* test_control_flow.py: This file uses doctests to test a section of a program.
* tuple.py: This script shows how to navigate through tuples.
* using_name.py: It is a basic program in python usesd to show the difference between importing a program and running it independently.

#### Data
This directory has all the data required by the scripts. 

#### Results
This directory id empty presently. After running all the scripts it is expected to contain the results given by the scripts.

#### Sandbox
This directory is for practice and contains practice scripts and files. On GitHub it is empty as it is not meant for submission. 
**********************************************************************

Found following files in results directory: JustOaksData.csv, best_align.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.0

Found 22 code files: MyExampleScript.py, sysargv.py, tuple.py, basic_io3.py, oaks.py, lc1.py, control_flow.py, dictionary.py, using_name.py, cfexercises1.py, boilerplate.py, cfexercises2.py, lc2.py, debugme.py, test_control_flow.py, align_seqs.py, basic_csv.py, basic_io2.py, scope.py, basic_io1.py, loops.py, oaks_debugme.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
def foo(x):
    x *= x # same as x = x*x
    print(x)

foo(2)
**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 96.5

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.03597s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#1/user/bin/env python3

import sys

print("This is the name of the script: ", sys.argv[0])
print("Numer of arguements: ", len(sys.argv))
print("The arguements are: ", str(sys.argv))
**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 94.5

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Numer of arguements:  1
The arguements are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.04139s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# 

for i in birds:
    print("Latin name: ", i[0])
    print("Common name: ", i[1])
    print("Mass: ", i[2])
    print("*****************************")

# A nice example output is:
# 
# Latin name: Passerculus sandwichensis
# Common name: Savannah sparrow
# Mass: 18.7
# ... etc.

# Hints: use the "print" command! You can use list comprehensions!
**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 92.5

Output (only first 500 characters): 


**********************************************************************
Latin name:  Passerculus sandwichensis
Common name:  Savannah sparrow
Mass:  18.7
*****************************
Latin name:  Delichon urbica
Common name:  House martin
Mass:  19
*****************************
Latin name:  Junco phaeonotus
Common name:  Yellow-eyed junco
Mass:  19.5
*****************************
Latin name:  Junco hyemalis
Common name:  Dark-eyed junco
Mass:  19.6
*****************************
Latin name:  Tachycineata bicolor
Common name:  Tree swallow
Mass:  20.2
****************
**********************************************************************

Code ran without errors

Time consumed = 0.03965s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
import pickle

my_dictionary = {" a key": 10, "another key": 11}
f = open('../sandbox/testp.p', 'wb')
pickle.dump(my_dictionary, f)
f.close()

f = open('../sandbox/testp.p', 'rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)
**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 90.5

Output (only first 500 characters): 


**********************************************************************
{' a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.05141s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

oaks_loop = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loop.add(species)
print(oaks_loop)

oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

oaks_uc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_uc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 88.0

Output (only first 500 characters): 


**********************************************************************
{'Quercus cerris', 'Quercus robur', 'Quercus petraea'}
{'Quercus cerris', 'Quercus robur', 'Quercus petraea'}
{'QUERCUS CERRIS', 'QUERCUS ROBUR', 'QUERCUS PETRAEA'}
{'QUERCUS CERRIS', 'QUERCUS ROBUR', 'QUERCUS PETRAEA'}

**********************************************************************

Code ran without errors

Time consumed = 0.03844s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

latin_names_lc = [i[0] for i in birds]
commom_names_lc = [i[1] for i in birds]
body_mass_lc = [i[2] for i in birds]
print("Latin names: ")
print(latin_names_lc)
print("Common names: ")
print(commom_names_lc)
print("Body mass: ")
print(body_mass_lc)

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

latin_names_loop = []
commom_names_loop =[]
body_mass_loop =[]

for i in birds:
#    print(i[0])
    latin_names_loop.append(i[0])
    commom_names_loop.append(i[1])
    body_mass_loop.append(i[2])

print("Latin names: ")
print(latin_names_loop)
print("Common names: ")
print(commom_names_loop)
print("Body mass: ")
print(body_mass_loop)

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 86.0

Output (only first 500 characters): 


**********************************************************************
Latin names: 
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names: 
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
Body mass: 
[18.7, 19, 19.5, 19.6, 20.2]
Latin names: 
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names: 
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swal
**********************************************************************

Code ran without errors

Time consumed = 0.04320s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Some functions exemplifying the control of statements
"""

__author__ = 'Aditi Madkaiakr (arm122@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

import sys

def even_or_odd(x=0):
    """Find whether a number x is even or odd"""
    if x % 2 == 0:
        return f"{x} x is Even!"
    return f"{x} is Odd ;("

def largest_divisor_five(x=120):
    """Find largest divisor of x among 2, 3, 4, 5"""
    #largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0:
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else:
        return f"No divisor found for {x} :("
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=770):
    """Find whether an integer is prime"""
    for i in range(2, x):
        if x % i == 0:
            print(f"{x} is not a prime :( : {i} is a divisor")
            return False
        print(f"{x} is a prime!") 
        return True

def find_all_primes(x=22):
    """Finds all primes upto x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} between 2 and {x}")
    return allprimes

#print(even_or_odd(12))

def main(argv):
    """Main entry point of the program"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(1))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if __name__ == '__main__':
    """Makes sure the main function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 86.0

Output (only first 500 characters): 


**********************************************************************
22 x is Even!
33 is Odd ;(
The largest divisor of 120 is 5
No divisor found for 1 :(
60 is not a prime :( : 2 is a divisor
False
59 is a prime!
True
3 is a prime!
4 is not a prime :( : 2 is a divisor
5 is a prime!
6 is not a prime :( : 2 is a divisor
7 is a prime!
8 is not a prime :( : 2 is a divisor
9 is a prime!
10 is not a prime :( : 2 is a divisor
11 is a prime!
12 is not a prime :( : 2 is a divisor
13 is a prime!
14 is not a prime :( : 2 is a divisor
15 is a prime!
16 is not a prime :( : 2 i
**********************************************************************

Code ran without errors

Time consumed = 0.04053s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. OR, 'Chiroptera': {'Myotis
#  lucifugus'} ... etc

#### Your solution here #### 

taxa_dic = dict()
for name, order in taxa:
        if order in taxa_dic:
                taxa_dic[order].add(name)
        else:
                taxa_dic[order] = set([name])

print(taxa_dic)

# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  
 
#### Your solution here #### 
taxa_dic_lc = {x[1]:set(y[0] for y in taxa if x[1] == y[1]) for x in taxa}
print(taxa_dic_lc)
**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 84.0

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Cleithrionomys rutilus', 'Peromyscus crinitus', 'Mus domesticus', 'Gerbillus henleyi'}, 'Afrosoricida': {'Microgale talazaci', 'Microgale dobsoni'}, 'Carnivora': {'Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus'}}
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Cleithrionomys rutilus', 'Peromyscus crinitus', 'Mus domesticus', 'Gerbillus henleyi'}, 'Afrosoricida': {'Microgale talazaci', 'Microgale dobsoni'}, 'Carnivora': {'Lyacon pictus'
**********************************************************************

Code ran without errors

Time consumed = 0.04070s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/user/bin/env python3

#Filename: using_python.py

if __name__ == '__main__':
    print("This program is running by itself")
else:
    print('I am being imported from another module')
print("This module's name is: " + __name__)

**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 82.0

Output (only first 500 characters): 


**********************************************************************
This program is running by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.04438s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Some basic functions. Half of them calculate factorial.
"""

__author__ = 'Aditi Madkaiakr (arm122@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

import sys

def foo_1(x = 16):
    """Evalulates squareroot of x"""
    return x ** 0.5

def foo_2(x = 9, y = 2):
    """Finds the greater number"""
    if x > y:
        return x
    return y

def foo_3(x = 3, y = 2, z = 5):
    """Demo function. Should ideally sort the numbers in ascending order but it fails under certain conditions."""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

def foo_4(x = 10):
    """Factorial method 1"""
    result = 1 
    for i in range(1, x +1):
        result = result * i
    return result

def foo_5(x = 10):
    """Factorial method 2"""
    if x == 1:
        return 1
    return x * foo_5(x -1)

def foo_6(x = 10):
    """Factorial method 3"""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

def main(argv):
    """Main entry point of the program"""
    print(foo_1(4))
    print(foo_2(5, 6))
    print(foo_3(6, 8, 9))
    print(foo_4(7))
    print(foo_5(8))
    print(foo_6(8))
    return 0

if __name__ == '__main__':
    """Makes sure the main function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 82.0

Output (only first 500 characters): 


**********************************************************************
2.0
6
[6, 8, 9]
5040
40320
40320

**********************************************************************

Code ran without errors

Time consumed = 0.04214s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
This is my description ;) & I'm changing it
Author: Aditi Madkaikar arm122@ic.ac.uk
Script: boilerplate.py
Descripton: First python program
Arguements: None
Date: Oct 2022
"""

__appname__ = '[Type appname here]'
__author__ = 'Aditi Madkaiakr (arm122@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

import sys
#import using_name
#import control_flow

def main(argv):
    """Main entry point of the program"""
    print("This is a boilerplate")
    #print(control_flow.find_all_primes(44))
    return False

if __name__ == '__main__':
    """Makes sure the main function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 82.0

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.03963s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
def hello_1(x):
    for j in range(x):
        if j % 3 == 0:
            print('Hello!')
    print(' ')
hello_1(12)

def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
            print('Hello')
        elif j % 4 == 3:
            print('Hello')
    print(' ')
hello_2(12)

def hello_3(x, y):
    for i in range(x, y):
        print('Hello')
hello_3(3, 17)

def hello_4(x):
    while x != 15:
        print('Hello')
        x = x + 3
    print(' ')
hello_4(0)

def hello_5(x):
    while x < 100:
        if x == 31:
            for k in range(7):
                print('Hello')
        elif x == 18:
            print('Hello')
        x = x + 1
    print(' ')
hello_5(12)

def hello_6(x, y):
    while x:
        print("Hello" + str(y))
        y += 1
        if y == 6:
            break
    print(' ')
hello_6(True, 0)    

**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 77.0

Output (only first 500 characters): 


**********************************************************************
Hello!
Hello!
Hello!
Hello!
 
Hello
Hello
Hello
Hello
 
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
 
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
 
Hello0
Hello1
Hello2
Hello3
Hello4
Hello5
 

**********************************************************************

Code ran without errors

Time consumed = 0.03910s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
high_rain_lc = [i for i in rainfall if i[1] > 100.0]
print("The months and rainfall values when the amount of rainfall was greater then 100mm: ")

print(high_rain_lc)

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

low_rain_lc = [i for i in rainfall if i[1] < 50.0]
print("The months and rainfall values when the amount of rainfall was lesser then 50mm: ")
print(low_rain_lc)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

high_rain_loop = []
for i in rainfall:
    if i[1] > 100.0:
#       print(i)
       high_rain_loop.append(i)
print("The months and rainfall values when the amount of rainfall was greater then 100mm: ")
print(high_rain_loop)

low_rain_loop = []
for i in rainfall:
    if i[1] < 50.0:
        low_rain_loop.append(i)
print("The months and rainfall values when the amount of rainfall was lesser then 50mm: ")
print(low_rain_loop)


# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 75.0

Output (only first 500 characters): 


**********************************************************************
The months and rainfall values when the amount of rainfall was greater then 100mm: 
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
The months and rainfall values when the amount of rainfall was lesser then 50mm: 
[('MAR', 49.9), ('SEP', 27.0)]
The months and rainfall values when the amount of rainfall was greater then 100mm: 
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
The months and rainfall values when the amount of rainfall
**********************************************************************

Code ran without errors

Time consumed = 0.04202s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
def buggyfunc(x):
    y = x
    for i in range(x):
        try: 
            y = y-1
            z = x/y
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work;{x = }; {y = }")
        else:
            print(f"OK; {x = }; {y = }, {z = };")
    return z

buggyfunc(20)
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 72.5

Output (only first 500 characters): 


**********************************************************************
OK; x = 20; y = 19, z = 1.0526315789473684;
OK; x = 20; y = 18, z = 1.1111111111111112;
OK; x = 20; y = 17, z = 1.1764705882352942;
OK; x = 20; y = 16, z = 1.25;
OK; x = 20; y = 15, z = 1.3333333333333333;
OK; x = 20; y = 14, z = 1.4285714285714286;
OK; x = 20; y = 13, z = 1.5384615384615385;
OK; x = 20; y = 12, z = 1.6666666666666667;
OK; x = 20; y = 11, z = 1.8181818181818181;
OK; x = 20; y = 10, z = 2.0;
OK; x = 20; y = 9, z = 2.2222222222222223;
OK; x = 20; y = 8, z = 2.5;
OK; x = 20; y = 7, 
**********************************************************************

Code ran without errors

Time consumed = 0.04154s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Some functions exemplifying the use of control statements
"""

__author__ = 'Aditi Madkaiakr (arm122@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

from pydoc import doc
import sys
import doctest


def even_or_odd(x=0):
    """Find whether a number x is even or odd
    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd ;('
    
    whenever float is provided nearest integer is used
    >>> even_or_odd(3.2)
    '3.2 is Odd ;('
    
    in case of negative numbers, the positive is taken
    >>> even_or_odd(-2)
    '-2 is Even!'
    """
    if x % 2 == 0:
        return f"{x} is Even!"
    return f"{x} is Odd ;("

def main(argv):
    """Main entry point of the program"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if __name__ == '__main__':
    """Makes sure the main function is called from the command line"""
    status = main(sys.argv)

doctest.testmod()

**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 72.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd ;(

**********************************************************************

Code ran without errors

Time consumed = 0.12855s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script to align two sequences.
"""

__author__ = 'Aditi Madkaiakr (arm122@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

# Importing the required modules
import sys

def calculate_score(s1, s2, l1, l2, startpoint):
    """
    This function calculates the best source when s1, s2, l1, l2 and the startpoint are provided. 
    It aligns the shorter sequence at the startpoint location of the longer sequence and calculates the number of matching base pairs
    If you want to import this function as a module, assign the longer sequence s1, and the shorter to s2. 
    l1 is length of the longest, l2 that of the shortest
    """
    matched = "" # to hold string displaying alignements
    score = 0
    #import ipdb; ipdb.set_trace()
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Assign the longer sequence s1, and the shorter to s2
# # l1 is length of the longest, l2 that of the shortest

def main(argv):
    """
    Main entry point of the program.
    This program takes a .txt file as input and then calculates the best score among the two sequences.
    It prints the outout to another .txt file which is then stored in the results directory
    """
    
    # Opening the data file
    with open('../data/seqs.txt', 'r') as f:
        temp = []
        for line in f:
            temp.append(line.split('\n')[0])

    # Asigning the sequences
    seq1 = temp[0]
    seq2 = temp[1]

    # Assign the longer sequence s1, and the shorter to s2
    # l1 is length of the longest, l2 that of the shortest

    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths
    
# now try to find the best match (highest score) for the two sequences
    my_best_align = None
    my_best_score = -1

    for i in range(l1): # Note that you just take the last alignment with the highest score
        z = calculate_score(s1, s2, l1, l2, i)
        if z > my_best_score:
            my_best_align = "." * i + s2 # think about what this is doing!
            my_best_score = z 
    print(my_best_align)
    print(s1)
    print("Best score:", my_best_score)

    list_to_save = [my_best_align, s1, 'Best score: ', my_best_score]

    f = open('../results/best_align.txt', 'w+')
    for i in list_to_save:
        f.write(str(i) + '\n')
    f.close() 
    return 0

if __name__ == '__main__':
    """Makes sure the main function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 72.5

Output (only first 500 characters): 


**********************************************************************
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........--*---*
.........CAATTCGGAT
ATCGCCGG
**********************************************************************

Code ran without errors

Time consumed = 0.05259s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
import csv

with open('../data/testcsv.csv', 'r') as f:
    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is:", row[0])

with open('../data/testcsv.csv', 'r') as f:
    with open('../data/bodymass.csv', 'w') as g:
        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])


**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 70.5

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is: Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is: Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is: Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is: Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Mada
**********************************************************************

Code ran without errors

Time consumed = 0.05252s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
list_to_save = range(100)
f = open('../sandbox/testout.txt', 'w')
for i in list_to_save:
    f.write(str(i) + '\n')
f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 68.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.04372s

======================================================================
Inspecting script file scope.py...

File contents are:

**********************************************************************
i = 1
x = 0
for i in range(10):
    x += 1
print(x)
print(i)

i = 1
x = 0
def a_function(y):
    x = 0
    for i in range(y):
        x += 1
    return x
x = a_function(10)
print(x)
print(i)

_a_global = 10 # a global variable

if _a_global >= 5:
    _b_global = _a_global + 5 # also a global variable
    
print("Before calling a_function, outside the function, the value of _a_global is", _a_global)
print("Before calling a_function, outside the function, the value of _b_global is", _b_global)

def a_function():
    _a_global = 4 # a local variable
    
    if _a_global >= 4:
        _b_global = _a_global + 5 # also a local variable
    
    _a_local = 3
    
    print("Inside the function, the value of _a_global is", _a_global)
    print("Inside the function, the value of _b_global is", _b_global)
    print("Inside the function, the value of _a_local is", _a_local)
    
a_function()

print("After calling a_function, outside the function, the value of _a_global is (still)", _a_global)
print("After calling a_function, outside the function, the value of _b_global is (still)", _b_global)

print("After calling a_function, outside the function, the value of _a_local is ", _a_local)

_a_global = 10

def a_function():
    _a_local = 4
    
    print("Inside the function, the value _a_local is", _a_local)
    print("Inside the function, the value of _a_global is", _a_global)
    
a_function()

print("Outside the function, the value of _a_global is", _a_global)

def a_function():
    _a_global = 10

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function2, value of _a_global is", _a_global)

    _a_function2()
    
    print("After calling a_function2, value of _a_global is", _a_global)
    
a_function()

print("The value of a_global in main workspace / namespace now is", _a_global)

_a_global = 10

def a_function():

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function2, value of _a_global is", _a_global)

    _a_function2()
    
    print("After calling a_function2, value of _a_global is", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is", _a_global)


**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 63.0

Output (only first 500 characters): 


**********************************************************************
10
9
10
1
Before calling a_function, outside the function, the value of _a_global is 10
Before calling a_function, outside the function, the value of _b_global is 15
Inside the function, the value of _a_global is 4
Inside the function, the value of _b_global is 9
Inside the function, the value of _a_local is 3
After calling a_function, outside the function, the value of _a_global is (still) 10
After calling a_function, outside the function, the value of _b_global is (still) 15

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AditiMadkaikar_/week2/code/scope.py", line 44, in <module>
    print("After calling a_function, outside the function, the value of _a_local is ", _a_local)
NameError: name '_a_local' is not defined. Did you mean: '_a_global'?

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
# Open a file handle for ../sandbox/test.txt
f = open('../sandbox/test.txt', 'r')
for line in f:
    print(line)

f.close()

f = open('../sandbox/test.txt', 'r')

for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        print(line)

with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0:
            print(line)

**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 61.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AditiMadkaikar_/week2/code/basic_io1.py", line 2, in <module>
    f = open('../sandbox/test.txt', 'r')
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/test.txt'

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

z = 0 
while z < 100:
    z = z + 1
    print(z)

**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 59.0

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********************************************************************

Code ran without errors

Time consumed = 0.04142s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script to align two sequences.
"""

__author__ = 'Aditi Madkaiakr (arm122@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

# Importing the required modules
import csv
import sys
import doctest

#Define function
def is_an_oak(name):
    """ 
    Returns True if name is starts with 'quercus' 
    >>> is_an_oak('Fagus sylvatica')
    False

    >>> is_an_oak('Quercus petraea')
    True

    """
    return name.lower().startswith('quercus ')

def main(argv): 
    """This is the main entry point of the function"""
    f = open('../data/TestOaksData.csv','r')
    g = open('../results/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0] + ' '):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])
    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 59.0

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.09010s

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 59.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!